import boto3
import json
import os

from boto3.dynamodb.conditions import Key, Attr

def wrapResponse( response, status ):
   '''
   Wrap response to match specification for APIGateway APIs
   '''
   return {
      "isBase64Encoded": False,
      "statusCode": status,
      "headers": {
         "Access-Control-Allow-Origin": "*",
         "Content-Type": "application/json"
      },
      "body": response
   }

def scanResult( section ):
   tableName = os.environ[ 'TABLE_NAME' ]
   session = boto3.Session(
      region_name=os.environ[ 'REGION_NAME' ]
   )
   dynamodb_resource = session.resource('dynamodb')
   table = dynamodb_resource.Table( tableName )
   return table.scan(
         FilterExpression=Key('section').eq( section )
   )

def about( event, context ):
   '''
   Implements /about
   Returns list of entities with section name equal to about
   '''
   response = scanResult( "about" )
   print( response )
   return wrapResponse( json.dumps( response ), 200 )

def serverless( event, context ):
   '''
   Implements /serverless
   Returns list of entities with section name equal to about
   '''
   response = scanResult( "serverless" )
   print( response )
   return wrapResponse( json.dumps( response ), 200 )
